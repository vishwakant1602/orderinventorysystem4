name: Order Inventory System CI/CD

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging, develop ]

env:
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/order-inventory-frontend
  BACKEND_BASE_IMAGE: ghcr.io/${{ github.repository_owner }}/order-inventory
  VERSION: ${{ github.run_number }}
  JAVA_VERSION: '11'
  NODE_VERSION: '18'

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Run frontend tests
        run: npm test || echo "No tests to run"

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: .next/
          retention-days: 1

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build backend services
        run: |
          cd backend
          ./mvnw clean package -DskipTests

      - name: Run backend tests
        run: |
          cd backend
          ./mvnw test

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend/**/target/*.jar
          retention-days: 1

  sonarqube:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository_owner }}_order-inventory-system
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.sources=.,backend/
            -Dsonar.exclusions=**/*.test.js,**/*.spec.js,**/*Test.java

  build-docker:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: .next/

      - name: Download backend build artifacts
        uses: actions/download-artifact@v3
        with:
          name: backend-build
          path: backend/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.FRONTEND_IMAGE }}:latest

      - name: Build and push Eureka Server Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/eureka-server
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-eureka:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-eureka:latest

      - name: Build and push API Gateway Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/api-gateway
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-gateway:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-gateway:latest

      - name: Build and push Order Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/order-service
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-order:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-order:latest

      - name: Build and push Inventory Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/inventory-service
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-inventory:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-inventory:latest

      - name: Build and push Auth Service Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/auth-service
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-auth:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-auth:latest

      - name: Build and push Payment Service Docker image
        uses: docker/build-push-action@v4
        if: hashFiles('backend/payment-service/pom.xml') != ''
        with:
          context: ./backend/payment-service
          push: true
          tags: |
            ${{ env.BACKEND_BASE_IMAGE }}-payment:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-payment:latest

  deploy-dev:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Update docker-compose with new image versions
        run: |
          sed -i "s|image: .*order-inventory-frontend.*|image: ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}|g" docker-compose.yml
          sed -i "s|image: .*order-inventory-eureka.*|image: ${{ env.BACKEND_BASE_IMAGE }}-eureka:${{ env.VERSION }}|g" docker-compose.yml
          sed -i "s|image: .*order-inventory-gateway.*|image: ${{ env.BACKEND_BASE_IMAGE }}-gateway:${{ env.VERSION }}|g" docker-compose.yml
          sed -i "s|image: .*order-inventory-order.*|image: ${{ env.BACKEND_BASE_IMAGE }}-order:${{ env.VERSION }}|g" docker-compose.yml
          sed -i "s|image: .*order-inventory-inventory.*|image: ${{ env.BACKEND_BASE_IMAGE }}-inventory:${{ env.VERSION }}|g" docker-compose.yml
          sed -i "s|image: .*order-inventory-auth.*|image: ${{ env.BACKEND_BASE_IMAGE }}-auth:${{ env.VERSION }}|g" docker-compose.yml

      - name: Deploy to development server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /path/to/deployment
            docker-compose pull
            docker-compose up -d

  deploy-staging:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS services
        run: |
          aws ecs update-service --cluster staging-cluster --service frontend-service --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service eureka-service --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service gateway-service --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service order-service --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service inventory-service --force-new-deployment
          aws ecs update-service --cluster staging-cluster --service auth-service --force-new-deployment

  deploy-prod:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://your-production-url.com
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Kubernetes deployments
        uses: Azure/k8s-deploy@v1
        with:
          manifests: |
            kubernetes/frontend-deployment.yaml
            kubernetes/eureka-deployment.yaml
            kubernetes/gateway-deployment.yaml
            kubernetes/order-deployment.yaml
            kubernetes/inventory-deployment.yaml
            kubernetes/auth-deployment.yaml
          images: |
            ${{ env.FRONTEND_IMAGE }}:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-eureka:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-gateway:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-order:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-inventory:${{ env.VERSION }}
            ${{ env.BACKEND_BASE_IMAGE }}-auth:${{ env.VERSION }}
          kubectl-version: 'latest'
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
